##################################################################
## LOFAR long baseline calibration pipeline parset     		##
##  - This pipeline requires prefactor V3 	       		##
##    to have already been run on both calibrator      		##
##    and target. 				       		##
##  - The working and runtime directory are expected   		##
##    to be the same.			               		##
##  - Please report any issues at 				##
##    https://github.com/lmorabit/long_baseline_pipeline	##
##################################################################


##########################################################
## Please update these parameters. 			##
##########################################################

# software paths
! long_baseline_pipeline_dir            = /net/lofar1/data1/sweijen/software/LOFAR/long_baseline_pipeline
! prefactor_dir                         = /net/lofar1/data1/sweijen/software/LOFAR/prefactor
! losoto_directory                     = /net/lofar1/data1/sweijen/software/LOFAR/latest/losoto
! aoflagger				= /net/lofar1/data1/sweijen/software/LOFAR/latest/aoflagger/bin/aoflagger ## path to your aoflagger executable
! lofar_directory 			= $LOFARROOT

# ## target data information
! target_input_path             = /data2/sweijen/widefield/test_data
! target_input_pattern          = L*.MS

## Prefactor solution information
#! cal_solutions 		= /net/lofar7/data1/sweijen/4C43.15_pf3/target_4C43.15/prefactor/Pre-Facet-Target/results/cal_values/solutions.h5
! cal_solutions 		= /data2/sweijen/widefield/solutions.h5
! solutions			= input.output.job_directory/solutions.h5
! cal_table			= combinedsols
! phasesol			= phase000
! continue_without_lotss = True

## Stations to flag
! flag_baselines                = [ ] ## for HBA data before October 2015, should set to: [ CS013HBA* ]

##########################################################
## These parameters may need to be updated.		##
##########################################################

## Output directories
! job_directory                 = input.output.job_directory ## directory of the prefactor outputs
! results_directory             = {{ job_directory }}/results
! inspection_directory          = {{ results_directory }}/inspection/
! cal_values_directory          = {{ results_directory }}/calibrator_results/

## catalogue information
! image_cat  = {{ job_directory }}/lotss_catalogue.csv
! delay_cat  = {{ job_directory }}/delay_calibrators.csv
! subtract_cat  = {{ job_directory }}/subtract_sources.csv
! do_download = True

## Runtime setup -- will depend on your computing cluster
! num_proc_per_node             = input.output.max_per_node    ## number of processes to use per step per node
! num_proc_per_node_limit       = 4     ## number of processes to use per step per node for tasks with high i/o (dppp or cp) or memory (eg calibration)
! max_dppp_threads              = 10     ## number of threads per process for NDPPP
! error_tolerance               = False ## False = stop if any subband fails, True = keep going

##########################################################
## Changing these will probably break something.	##
##########################################################

## global information
! base_directory                        = input.output.working_directory  
! job_directory                         = input.output.job_directory      
! scripts			 	= {{ long_baseline_pipeline_dir }}/bin
! prefactor_scripts			= {{ prefactor_dir }}/scripts

## Averaging parameters
! cal_shift_avg_timestep        = 4    ## Calibrator time averaging: output should be 8 seconds
! cal_shift_avg_timeres         = 4
! cal_shift_avg_freqstep        = 4    ## Calibrator freq averaging: output should be 2 channels per subband
! cal_shift_avg_freqres        = 97.64kHz    ## Calibrator freq averaging: output should be 2 channels per subband
! tgt_shift_avg_timestep        = 16   ## Target time averaging: output should be 16 seconds
! tgt_shift_avg_freqstep        = 16   ## Target freq averaging: output should be 1 channel per subband

## Station combination
! phaseup_command               = {ST001:'CS*'} ## 'CS*' for all core stations (or select stations you want to use)
! filter_command                = '!CS*&*'      ## remove the core stations after combination

## Closure phase stations
! closure_phase_stations        = 'DE601;DE605;ST001' ## list of three stations separated by ;
! closure_phase_file            = {{ job_directory }}/closure_phases.txt ## pipeline expects this location - do not changes

## Configuration for long baseline pipeline 
! firstnpy_file                     = {{ long_baseline_pipeline_dir }}/data/first_2008.simple.npy

! rfistrategy			= HBAdefault
! max_length = 60 ## amount of subbands to concatenate for full-bandwidth flagging (for calibrator you can take all SBs, for target stick to about 148)

##
## END CONFIGURATION


##########################################################
## Steps to run.					##
##########################################################

! substep_clip = clipATeam, ## leave blank for no a-team clipping
! substep_flag = # aoflagging,  ## turned off by default
! substep_cleanup = ,cleanup

#pipeline.steps = [ setup, prep, {{ substep_clip }} {{ substep_flag }} delaycal, apply {{ substep_cleanup }} ]
pipeline.steps = [ setup, prep ]

#pipeline.steps.setup = [ mk_results_dir, mk_inspect_dir, mk_cal_values_dir, createmap_target, createmap_target_list, cp_cal_solutions, download_cats ]
pipeline.steps.setup = [ mk_results_dir, mk_inspect_dir, mk_cal_values_dir, createmap_target, createmap_target_list, cp_cal_solutions, download_cats]
#pipeline.steps.prep = [ h5parm_add_IS, ndppp_prep_target, ndppp_prep_target_list, prepare_explode_calibrators]#, explode_calibrators ]
pipeline.steps.prep = [ h5parm_add_IS, ndppp_prep_target, createmap_target2, ndppp_prep_target_list, do_parallel]
#pipeline.steps.prep = [ h5parm_add_IS, ndppp_prep_target, ndppp_prep_target_list]


###########################################################################


##################################################################################################################
##														##
##			BEGIN PIPELINE: DO NOT UPDATE BELOW THIS LINE!						##
##														##
##################################################################################################################

## create directories

# create the results directory if needed
mk_results_dir.control.kind               = plugin
mk_results_dir.control.type               = makeDirectory
mk_results_dir.control.directory          = {{ results_directory }}

# create the inspection_directory if needed
mk_inspect_dir.control.kind               = plugin
mk_inspect_dir.control.type               = makeDirectory
mk_inspect_dir.control.directory          = {{ inspection_directory }}

# create the cal_values_directory if needed
mk_cal_values_dir.control.kind               =  plugin
mk_cal_values_dir.control.type               =  makeDirectory
mk_cal_values_dir.control.directory          =  {{ cal_values_directory }}

# create a directory for the ionex files
mk_ionex_dir.control.kind		  = plugin
mk_ionex_dir.control.type		  = makeDirectory
mk_ionex_dir.control.directory		  = {{ ionex_path }}

# generate a mapfile of all the target data
createmap_target.control.kind             = plugin
createmap_target.control.type             = createMapfile
createmap_target.control.method           = mapfile_from_folder
createmap_target.control.mapfile_dir      = input.output.mapfile_dir
createmap_target.control.filename         = createmap_target.mapfile
createmap_target.control.folder           = {{ target_input_path }}
createmap_target.control.pattern          = {{ target_input_pattern }}

# convert to a mapfile with all subbands in one list
createmap_target_list.control.kind            =   plugin
createmap_target_list.control.type            =   createMapfile
createmap_target_list.control.method          =   mapfile_all_to_one
createmap_target_list.control.mapfile_dir     =   input.output.mapfile_dir
createmap_target_list.control.filename        =   combine_data_tar_map.mapfile
createmap_target_list.control.mapfile_in      =   createmap_target.output.mapfile

# copy the cal solutions to operate on
cp_cal_solutions.control.kind             = recipe
cp_cal_solutions.control.type             = executable_args
cp_cal_solutions.control.executable       = /bin/cp
cp_cal_solutions.control.max_per_node     = 1
cp_cal_solutions.control.skip_infile      = True
cp_cal_solutions.control.mapfile_in       = createmap_target_list.output.mapfile
cp_cal_solutions.argument.flags           = [{{ cal_solutions }}, {{ solutions }}]

# download the relevant catalogues
download_cats.control.kind                      = plugin
download_cats.control.type                      = DownloadCats
download_cats.control.mapfile_in                = createmap_target_list.output.mapfile
download_cats.control.lotss_radius              = 2.
download_cats.control.lbcs_radius               = 2.
download_cats.control.bright_limit_Jy           = 5.
download_cats.control.lotss_result_file         = {{ image_cat }}
download_cats.control.delay_cals_file           = {{ delay_cat }}
download_cats.control.subtract_file             = {{ subtract_cat }}
download_cats.control.match_tolerance           = 5.
download_cats.control.subtract_limit            = 0.5
download_cats.control.image_limit_Jy            = 0.05
download_cats.control.doDownload                = {{ do_download }}
download_cats.control.continue_no_lotss         = {{ continue_without_lotss }}

## international stations already exist in calibrator solutions but not in target phase
## run script to add them to necessary solution tables
h5parm_add_IS.control.type                            	= pythonplugin
h5parm_add_IS.control.executable                      	= {{ scripts }}/addIS_to_h5.py
h5parm_add_IS.control.mapfile_in                      	= createmap_target_list.output.mapfile
h5parm_add_IS.control.inputkey                        	= mslist
h5parm_add_IS.argument.flags                      	= [{{ solutions }},mslist]
h5parm_add_IS.cal_solset				= calibrator
h5parm_add_IS.argument.solset_in			= target
h5parm_add_IS.argument.solset_out			= {{ cal_table }}
h5parm_add_IS.argument.do_int_stations			= True			

# run NDPPP on the target data to flag and apply solutions
ndppp_prep_target.control.type                    = dppp
ndppp_prep_target.control.max_per_node            = {{ num_proc_per_node }}
ndppp_prep_target.control.error_tolerance         = {{ error_tolerance }}
ndppp_prep_target.argument.numthreads             = {{ max_dppp_threads }}
ndppp_prep_target.argument.msin                   = createmap_target.output.mapfile  
ndppp_prep_target.argument.msin.datacolumn        = DATA
ndppp_prep_target.argument.msin.baseline          = *&
ndppp_prep_target.argument.msout.datacolumn       = DATA
ndppp_prep_target.argument.msout.writefullresflag = False
ndppp_prep_target.argument.msout		  = .
ndppp_prep_target.argument.steps                  = [flag,flagamp,applyPA,applybandpass,applyclock,applyRM,applybeam,applyphase,count]
ndppp_prep_target.argument.flag.type                    = preflagger
ndppp_prep_target.argument.flag.baseline                = {{ flag_baselines }}
ndppp_prep_target.argument.flagamp.type                 = preflagger
ndppp_prep_target.argument.flagamp.amplmin              = 1e-30
ndppp_prep_target.argument.applyclock.type              = applycal
ndppp_prep_target.argument.applyclock.parmdb            = {{ solutions }}
ndppp_prep_target.argument.applyclock.correction        = clock
ndppp_prep_target.argument.applyclock.solset            = {{ cal_table }}
ndppp_prep_target.argument.applyPA.type                 = applycal
ndppp_prep_target.argument.applyPA.parmdb               = {{ solutions }}
ndppp_prep_target.argument.applyPA.correction           = polalign
ndppp_prep_target.argument.applyPA.solset               = {{ cal_table }}
ndppp_prep_target.argument.applybandpass.type           = applycal
ndppp_prep_target.argument.applybandpass.parmdb         = {{ solutions }}
ndppp_prep_target.argument.applybandpass.correction     = bandpass
ndppp_prep_target.argument.applybandpass.updateweights  = True
ndppp_prep_target.argument.applybandpass.solset         = {{ cal_table }}
ndppp_prep_target.argument.applybeam.type               = applybeam
ndppp_prep_target.argument.applybeam.usechannelfreq     = True
ndppp_prep_target.argument.applybeam.updateweights      = False
ndppp_prep_target.argument.applyRM.type                 = applycal
ndppp_prep_target.argument.applyRM.parmdb               = {{ solutions }}
ndppp_prep_target.argument.applyRM.correction           = RMextract
ndppp_prep_target.argument.applyRM.solset               = {{ cal_table }}
ndppp_prep_target.argument.applyphase.type              = applycal
ndppp_prep_target.argument.applyphase.parmdb            = {{ solutions }}
ndppp_prep_target.argument.applyphase.correction        = {{ phasesol }}
ndppp_prep_target.argument.applyphase.solset            = {{ cal_table }}

# generate a mapfile of all the target data
createmap_target2.control.kind             = plugin
createmap_target2.control.type             = createMapfile
createmap_target2.control.method           = mapfile_from_folder
createmap_target2.control.mapfile_dir      = input.output.mapfile_dir
createmap_target2.control.filename         = createmap_target2.mapfile
createmap_target2.control.folder           = {{ job_directory }}
createmap_target2.control.pattern          = *.ndppp_prep_target

# combine all entries into one mapfile
ndppp_prep_target_list.control.kind                                =   plugin
ndppp_prep_target_list.control.type                                =   createMapfile
ndppp_prep_target_list.control.method                              =   mapfile_all_to_one
ndppp_prep_target_list.control.mapfile_dir                         =   input.output.mapfile_dir
ndppp_prep_target_list.control.filename                            =   ndppp_prep_target_list.mapfile
ndppp_prep_target_list.control.mapfile_in                          =   createmap_target2.output.mapfile

# do a parallel search for the best delay calibrator
do_parallel.control.type                  = pythonplugin
do_parallel.control.max_per_node          = {{ num_proc_per_node }}
do_parallel.control.executable            = {{ scripts }}/evaluate_potential_delay_calibrators.py
do_parallel.argument.flags                = [ndppp_prep_target_list.output.mapfile,{{ delay_cat }}]
do_parallel.argument.ncpu                 = {{ num_proc_per_node }}
do_parallel.argument.nsbs                 = -1

# Shift to all the selected calibrators.
prepare_explode_calibrators.control.kind                    = plugin
prepare_explode_calibrators.control.type                    = makeExplodeParset
prepare_explode_calibrators.control.filename               = {{ job_directory }}/parsets/dppp_explode_calibrators.parset
prepare_explode_calibrators.control.calibrators            = {{ delay_cat }}
prepare_explode_calibrators.control.msout.storagemanager   = dysco
prepare_explode_calibrators.control.msout.writefullresflag = False
prepare_explode_calibrators.control.msout.overwrite        = True
prepare_explode_calibrators.control.steps                  = [explode]
prepare_explode_calibrators.control.explode.replaceparms   = [shift.phasecenter, msout.name]
prepare_explode_calibrators.control.explode.steps          = [shift, avg, adder, filter, msout]
prepare_explode_calibrators.control.shift.type             = phaseshift
prepare_explode_calibrators.control.avg.type               = average
prepare_explode_calibrators.control.avg.timeresolution     = {{ cal_shift_avg_timeres }}
prepare_explode_calibrators.control.avg.freqresolution     = {{ cal_shift_avg_freqres }}
prepare_explode_calibrators.control.adder.type             = stationadder
prepare_explode_calibrators.control.adder.stations         = {{ phaseup_command }}
prepare_explode_calibrators.control.filter.type            = filter
prepare_explode_calibrators.control.filter.baseline        = {{ filter_command }}
prepare_explode_calibrators.control.filter.remove          = True
prepare_explode_calibrators.control.numthreads             = {{ max_dppp_threads }}

explode_calibrators.control.type = dppp
explode_Calibrators.control.executable = {{ lofar_directory }}/bin/NDPPP
explode_calibrators.control.max_per_node = 1
explode_calibrators.control.mapfiles_in = [ndppp_prep_target.output.mapfile]
explode_calibrators.control.inputkeys = msfile
explode_calibrators.argument.msin = msfile
explode_calibrators.argument.flags = [{{ job_directory }}/parsets/dppp_explode_calibrators.parset]
